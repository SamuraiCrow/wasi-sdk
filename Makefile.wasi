# Any copyright is dedicated to the Public Domain.
# http://creativecommons.org/publicdomain/zero/1.0/

ROOT_DIR=${CURDIR}
LLVM_PROJ_DIR?=$(ROOT_DIR)/src/llvm-project

# Windows needs munging
ifeq ($(OS),Windows_NT)

PREFIX?=c:/wasi-sdk
# we need to explicitly call bash -c for makefile $(shell ...), otherwise we'll try under
# who knows what
BASH=bash -c

ifeq (x$(MSYSTEM),x)
$(error On Windows, this Makefile only works in MSYS2 environments such as git-bash.)
endif

# msys needs any /-prefixed arguments, or =/ containing, to turn into //
# because it tries to path-expand the / into the msys root.  // escapes this.
ESCAPE_SLASH=/

BUILD_PREFIX=$(PREFIX)

# assuming we're running under msys2 (git-bash), PATH needs /c/foo format directories (because
# it itself is :-delimited)
PATH_PREFIX=$(shell cygpath.exe -u $(BUILD_PREFIX))

else

PREFIX?=/opt/wasi-sdk
DESTDIR=$(abspath build/install)
BUILD_PREFIX=$(DESTDIR)$(PREFIX)
PATH_PREFIX=$(BUILD_PREFIX)
ESCAPE_SLASH?=
BASH=

endif

CLANG_VERSION=$(shell $(BASH) ./llvm_version.sh $(LLVM_PROJ_DIR))
VERSION:=$(shell $(BASH) ./version.sh)
DEBUG_PREFIX_MAP=-fdebug-prefix-map=$(ROOT_DIR)=wasisdk://v$(VERSION)

default: build
	@echo "Use -fdebug-prefix-map=$(ROOT_DIR)=wasisdk://v$(VERSION)"

check:
	CC="clang --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	CXX="clang++ --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	PATH="$(PATH_PREFIX)/bin:$$PATH" tests/run.sh

clean:
	rm -rf build $(DESTDIR)

build/llvm-wasi.BUILT:
	mkdir -p build/llvm-wasi
	cd build/llvm-wasi && cmake -G Ninja \
		-DWASI_SDK_PREFIX=$(PREFIX) \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=$(PREFIX) \
		-DLLVM_TARGETS_TO_BUILD=WebAssembly \
		-DLLVM_DEFAULT_TARGET_TRIPLE=wasm32-wasi \
		-DDEFAULT_SYSROOT=$(PREFIX)/share/wasi-sysroot \
		-DLLVM_INSTALL_BINUTILS_SYMLINKS=TRUE \
		-DCMAKE_TOOLCHAIN_FILE=$(PREFIX)/share/cmake/wasi-sdk.cmake \
		$(LLVM_PROJ_DIR)/llvm
	CC="clang --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	CXX="clang++ --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	DESTDIR=$(DESTDIR) ninja $(NINJA_FLAGS) -C build/llvm-wasi \
		install-llvm-ranlib \
		install-llvm-strip \
		install-llvm-dwarfdump \
		install-ar \
		install-ranlib \
		install-strip \
		install-nm \
		install-size \
		install-strings \
		install-objdump \
		install-objcopy \
		install-c++filt \
		llvm-config
	touch build/llvm-wasi.BUILT

# Flags for libcxx.
LIBCXX_CMAKE_FLAGS = \
    -DCMAKE_C_COMPILER_WORKS=ON \
    -DCMAKE_CXX_COMPILER_WORKS=ON \
    -DCMAKE_AR=$(BUILD_PREFIX)/bin/ar \
    -DCMAKE_MODULE_PATH=$(ROOT_DIR)/cmake \
    -DCMAKE_TOOLCHAIN_FILE=$(ROOT_DIR)/wasi-sdk.cmake \
    -DCMAKE_STAGING_PREFIX=$(PREFIX)/share/wasi-sysroot \
    -DLLVM_CONFIG_PATH=$(ROOT_DIR)/build/llvm/bin/llvm-config \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DLIBCXX_ENABLE_THREADS:BOOL=OFF \
    -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
    -DLIBCXX_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
    -DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
    -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
    -DCMAKE_BUILD_TYPE=RelWithDebugInfo \
    -DLIBCXX_ENABLE_SHARED:BOOL=OFF \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
    -DLIBCXX_ENABLE_EXCEPTIONS:BOOL=OFF \
    -DLIBCXX_ENABLE_FILESYSTEM:BOOL=OFF \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$(LLVM_PROJ_DIR)/libcxxabi/include \
    -DLIBCXX_HAS_MUSL_LIBC:BOOL=ON \
    -DLIBCXX_ABI_VERSION=2 \
    -DWASI_SDK_PREFIX=$(BUILD_PREFIX) \
    --debug-trycompile

build/libcxx-wasi.BUILT: build/llvm.BUILT build/compiler-rt.BUILT build/wasi-libc.BUILT
	# Do the build.
	mkdir -p build/libcxx-wasi
	cd build/libcxx-wasi && cmake -G Ninja $(LIBCXX_CMAKE_FLAGS) \
		-DWASI_SDK_PREFIX=$(PREFIX) \
		-DCMAKE_SYSROOT=$(BUILD_PREFIX)/share/wasi-sysroot \
		-DCMAKE_C_FLAGS="$(DEBUG_PREFIX_MAP) \
		-DCMAKE_CXX_FLAGS="$(DEBUG_PREFIX_MAP) \
		-DLIBCXX_LIBDIR_SUFFIX=$(ESCAPE_SLASH)/wasm32-wasi \
		-DCMAKE_TOOLCHAIN_FILE=$(PREFIX)/share/cmake/wasi-sdk.cmake \
		$(LLVM_PROJ_DIR)/libcxx
	CC="clang --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	CXX="clang++ --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	ninja $(NINJA_FLAGS) -C build/libcxx-wasi
	# Do the install.
	DESTDIR=$(DESTDIR) ninja $(NINJA_FLAGS) -C build/libcxx install
	touch build/libcxx.BUILT

# Flags for libcxxabi.
LIBCXXABI_CMAKE_FLAGS = \
    -DCMAKE_C_COMPILER_WORKS=ON \
    -DCMAKE_CXX_COMPILER_WORKS=ON \
    -DCMAKE_AR=$(BUILD_PREFIX)/bin/ar \
    -DCMAKE_MODULE_PATH=$(ROOT_DIR)/cmake \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=OFF \
    -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
    -DLIBCXXABI_SILENT_TERMINATE:BOOL=ON \
    -DLIBCXXABI_ENABLE_THREADS:BOOL=OFF \
    -DLIBCXXABI_HAS_PTHREAD_API:BOOL=OFF \
    -DLIBCXXABI_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
    -DLIBCXXABI_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
    -DLIBCXXABI_HAS_WIN32_THREAD_API:BOOL=OFF \
    -DLIBCXXABI_ENABLE_PIC:BOOL=OFF \
    -DCXX_SUPPORTS_CXX11=ON \
    -DLLVM_COMPILER_CHECKED=ON \
    -DCMAKE_BUILD_TYPE=RelWithDebugInfo \
    -DLIBCXXABI_LIBCXX_PATH=$(LLVM_PROJ_DIR)/libcxx \
    -DLIBCXXABI_LIBCXX_INCLUDES=$(BUILD_PREFIX)/share/wasi-sysroot/include/c++/v1 \
    -DLLVM_CONFIG_PATH=$(ROOT_DIR)/build/llvm/bin/llvm-config \
    -DCMAKE_TOOLCHAIN_FILE=$(ROOT_DIR)/wasi-sdk.cmake \
    -DCMAKE_STAGING_PREFIX=$(PREFIX)/share/wasi-sysroot \
    -DWASI_SDK_PREFIX=$(BUILD_PREFIX) \
    -DUNIX:BOOL=ON \
    --debug-trycompile

build/libcxxabi-wasi.BUILT: build/libcxx.BUILT build/llvm.BUILT
	# Do the build.
	mkdir -p build/libcxxabi-wasi
	cd build/libcxxabi-wasi && cmake -G Ninja $(LIBCXXABI_CMAKE_FLAGS) \
		-DWASI_SDK_PREFIX=$(PREFIX) \
		-DCMAKE_SYSROOT=$(BUILD_PREFIX)/share/wasi-sysroot \
		-DCMAKE_C_FLAGS="$(DEBUG_PREFIX_MAP) \
		-DCMAKE_CXX_FLAGS="$(DEBUG_PREFIX_MAP) \
		-DLIBCXXABI_LIBDIR_SUFFIX=$(ESCAPE_SLASH)/wasm32-wasi \
		-DCMAKE_TOOLCHAIN_FILE=$(PREFIX)/share/cmake/wasi-sdk.cmake \
		$(LLVM_PROJ_DIR)/libcxxabi
	CC="clang --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	CXX="clang++ --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	ninja $(NINJA_FLAGS) -C build/libcxxabi-wasi
	# Do the install.
	DESTDIR=$(DESTDIR) ninja $(NINJA_FLAGS) -C build/libcxxabi-wasi install
	touch build/libcxxabi.BUILT

build: build/llvm-wasi.BUILT build/libcxxabi-wasi.BUILT build/libcxx-wasi.BUILT

.PHONY: default clean build check
